1. Implement a function that takes two dices as input and computes two values: the first value is the number of 
times the first dice wins (out of all possible 36 choices), the second value is the number of times the second dice 
wins. We say that a dice wins if the number on it is greater than the number on the other dice.
solution:
def count_wins(dice1, dice2):
    assert len(dice1) == 6 and len(dice2) == 6
    dice1_wins, dice2_wins = 0, 0
    
    # write your code here
    equal=0
    for i in range(6):
        for j in range(6):
            if dice1[i] > dice2[j]:
              dice1_wins+=1
            if dice1[i] == dice2[j]: 
                equal += 1
                
    dice2_wins = 36 - dice1_wins - equal          
    return (dice1_wins, dice2_wins)
    
print(count_wins([1,2,3,4,5,6] , [1,2,3,4,5,6]))
print(count_wins([1,1,6,6,8,8] , [2,2,4,4,9,9]))

Task 2:
Implement a function that takes a list of dices and checks whether there is dice (in this list) that is better than all 
other dices. We say that a dice is better than another one, if it wins more frequently (that is, out of all 36 
possibilities, it wins in A cases, while the second one wins in B cases, and A>B. If there is such a dice, return its 
(0-based) index. Otherwise, return -1.
 solution:
def count_wins(dice1, dice2):
    assert len(dice1) == 6 and len(dice2) == 6
    dice1_wins, dice2_wins = 0, 0
    
    # write your code here
    equal=0
    for i in range(6):
        for j in range(6):
            if dice1[i] > dice2[j]:
              dice1_wins+=1
            if dice1[i] == dice2[j]: 
                equal += 1
                
    dice2_wins = 36 - dice1_wins - equal          
    return (dice1_wins, dice2_wins)


def find_the_best_dice(dices):
    assert all(len(dice) == 6 for dice in dices)

    # write your code here
    # use your implementation of count_wins method if necessary
    for i in range(len(dices)):
        status = []
        for j in range(len(dices)):
            if i != j:
                dice1_wins ,dice2_wins = count_wins(dices[i], dices[j])
                if dice1_wins > dice2_wins:
                    status.append(1)
        if status.count(1) == len(dices) - 1:
            return i




    return -1
print(find_the_best_dice([[1, 1, 6, 6, 8, 8], [2, 2, 4, 4, 9, 9], [3, 3, 5, 5, 7, 7]]))
print(find_the_best_dice([[1, 1, 2, 4, 5, 7], [1, 2, 2, 3, 4, 7], [1, 2, 3, 4, 5, 6]]))
print(find_the_best_dice([[3, 3, 3, 3, 3, 3], [6, 6, 2, 2, 2, 2], [4, 4, 4, 4, 0, 0], [5, 5, 5, 1, 1, 1]]))

Task 3:
Implement a function that takes a list of dices (possibly more than three) and returns a strategy. The strategy is a dictionary:

If, after analyzing the given list of dices, you decide to choose a dice first, set strategy["choose_first"] to True and 
set strategy["first_dice"] to be the (0-based) index of the dice you would like to choose

If you would like to be the second one to choose a dice, set strategy["choose_first"] to False. Then, specify, for 
each dice that your opponent may take, the dice that you would take in return. Namely, for each i from 0 to 
en(dices)-1, set strategy[i] to an index j of the dice that you would take if the opponent takes the i-th dice first.

solution:
def count_wins(dice1, dice2):
    assert len(dice1) == 6 and len(dice2) == 6
    dice1_wins, dice2_wins = 0, 0
    
    # write your code here
    equal=0
    for i in range(6):
        for j in range(6):
            if dice1[i] > dice2[j]:
              dice1_wins+=1
            if dice1[i] == dice2[j]: 
                equal += 1
                
    dice2_wins = 36 - dice1_wins - equal          
    return (dice1_wins, dice2_wins)


def find_the_best_dice(dices):
    assert all(len(dice) == 6 for dice in dices)

    # write your code here
    # use your implementation of count_wins method if necessary
    for i in range(len(dices)):
        status = []
        for j in range(len(dices)):
            if i != j:
                dice1_wins ,dice2_wins = count_wins(dices[i], dices[j])
                if dice1_wins > dice2_wins:
                    status.append(1)
        if status.count(1) == len(dices) - 1:
            return i




    return -1

def compute_strategy(dices):
    assert all(len(dice) == 6 for dice in dices)

    strategy = dict()
    strategy["choose_first"] = True
    strategy["first_dice"] = 0
    for i in range(len(dices)):
        strategy[i] = (i + 1) % len(dices)
        
    # write your code here
    res=find_the_best_dice(dices)
    if res != -1:
        strategy["first_dice"] = res
    else:
      strategy["choose_first"] = False
      for i in range(len(dices)):
          for j in range(len(dices)):
              if i != j:
                  dice1_wins ,dice2_wins = count_wins(dices[i], dices[j])
                  if dice1_wins < dice2_wins:
                     break
          strategy[i] = j         
      
    
    return strategy
    
print(compute_strategy([[1, 1, 4, 6, 7, 8], [2, 2, 2, 6, 7, 7], [3, 3, 3, 5, 5, 8]])) 
print(compute_strategy([[4, 4, 4, 4, 0, 0], [7, 7, 3, 3, 3, 3], [6, 6, 2, 2, 2, 2], [5, 5, 5, 1, 1, 1]]))








